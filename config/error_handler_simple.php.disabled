<?php
/**
 * Titre: Gestionnaire d'erreurs PHP simplifi√© anti-boucle
 * Version: 0.5 beta + build auto
 */

// Protection contre les boucles infinies
if (defined('ERROR_HANDLER_LOADED')) {
    return;
}
define('ERROR_HANDLER_LOADED', true);

// Configuration
define('ERROR_LOG_PATH', dirname(__DIR__) . '/storage/logs/');
define('IS_PRODUCTION', getenv('APP_ENV') !== 'development');

// Cr√©er le dossier de logs si n√©cessaire
if (!is_dir(ERROR_LOG_PATH)) {
    mkdir(ERROR_LOG_PATH, 0755, true);
}

/**
 * Gestionnaire d'erreurs simplifi√©
 */
function simpleErrorHandler($severity, $message, $file, $line) {
    // Ignorer les notices et warnings en production
    if (IS_PRODUCTION && in_array($severity, [E_NOTICE, E_WARNING, E_DEPRECATED])) {
        return true;
    }
    
    // Log toutes les erreurs
    $log_message = sprintf(
        "[%s] %s: %s in %s:%d\n",
        date('Y-m-d H:i:s'),
        getSeverityName($severity),
        $message,
        basename($file),
        $line
    );
    
    file_put_contents(ERROR_LOG_PATH . 'errors.log', $log_message, FILE_APPEND | LOCK_EX);
    
    // Redirection uniquement pour erreurs fatales
    if (isFatalError($severity)) {
        redirectToErrorPage('500', $message);
    }
    
    return true;
}

/**
 * Gestionnaire d'exceptions
 */
function simpleExceptionHandler($exception) {
    $log_message = sprintf(
        "[%s] Exception: %s in %s:%d\n",
        date('Y-m-d H:i:s'),
        $exception->getMessage(),
        basename($exception->getFile()),
        $exception->getLine()
    );
    
    file_put_contents(ERROR_LOG_PATH . 'exceptions.log', $log_message, FILE_APPEND | LOCK_EX);
    
    redirectToErrorPage('500', $exception->getMessage());
}

/**
 * Gestionnaire d'arr√™t fatal
 */
function simpleShutdownHandler() {
    $error = error_get_last();
    
    if ($error && isFatalError($error['type'])) {
        $log_message = sprintf(
            "[%s] Fatal: %s in %s:%d\n",
            date('Y-m-d H:i:s'),
            $error['message'],
            basename($error['file']),
            $error['line']
        );
        
        file_put_contents(ERROR_LOG_PATH . 'fatal.log', $log_message, FILE_APPEND | LOCK_EX);
        
        // Affichage direct pour √©viter les redirections infinies
        if (!headers_sent()) {
            http_response_code(500);
            showEmergencyErrorPage();
        }
    }
}

/**
 * Redirection s√©curis√©e vers page d'erreur
 */
function redirectToErrorPage($code, $message = '') {
    // Emp√™cher les redirections infinies
    if (basename($_SERVER['SCRIPT_NAME']) === 'error.php' || 
        strpos($_SERVER['REQUEST_URI'], '/error.php') !== false) {
        showEmergencyErrorPage();
        return;
    }
    
    if (!headers_sent()) {
        $params = ['type' => $code];
        if (!IS_PRODUCTION && $message) {
            $params['debug_message'] = $message;
        }
        
        header('Location: /error.php?' . http_build_query($params));
        exit;
    }
}

/**
 * Page d'erreur d'urgence (sans redirection)
 */
function showEmergencyErrorPage() {
    if (headers_sent()) return;
    
    http_response_code(500);
    echo '<!DOCTYPE html>
<html>
<head>
    <title>Erreur Syst√®me</title>
    <style>
        body { font-family: Arial; text-align: center; padding: 50px; background: #f5f5f5; }
        .error { background: white; padding: 30px; border-radius: 10px; display: inline-block; }
        .icon { font-size: 4em; margin-bottom: 20px; }
        h1 { color: #e74c3c; margin: 0 0 20px 0; }
        p { color: #666; margin: 10px 0; }
        .btn { background: #3498db; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: inline-block; margin-top: 20px; }
    </style>
</head>
<body>
    <div class="error">
        <div class="icon">üí•</div>
        <h1>Erreur Syst√®me</h1>
        <p>Une erreur technique s\'est produite.</p>
        <p>L\'√©quipe technique a √©t√© notifi√©e.</p>
        <a href="/" class="btn">Retour √† l\'accueil</a>
    </div>
</body>
</html>';
    exit;
}

/**
 * V√©rifier si l'erreur est fatale
 */
function isFatalError($severity) {
    return in_array($severity, [
        E_ERROR,
        E_CORE_ERROR,
        E_COMPILE_ERROR,
        E_PARSE,
        E_USER_ERROR,
        E_RECOVERABLE_ERROR
    ]);
}

/**
 * Nom de la s√©v√©rit√©
 */
function getSeverityName($severity) {
    $names = [
        E_ERROR => 'FATAL',
        E_WARNING => 'WARNING',
        E_PARSE => 'PARSE',
        E_NOTICE => 'NOTICE',
        E_CORE_ERROR => 'CORE_ERROR',
        E_CORE_WARNING => 'CORE_WARNING',
        E_COMPILE_ERROR => 'COMPILE_ERROR',
        E_COMPILE_WARNING => 'COMPILE_WARNING',
        E_USER_ERROR => 'USER_ERROR',
        E_USER_WARNING => 'USER_WARNING',
        E_USER_NOTICE => 'USER_NOTICE',
        E_STRICT => 'STRICT',
        E_RECOVERABLE_ERROR => 'RECOVERABLE_ERROR',
        E_DEPRECATED => 'DEPRECATED',
        E_USER_DEPRECATED => 'USER_DEPRECATED'
    ];
    
    return $names[$severity] ?? 'UNKNOWN';
}

// Enregistrement des gestionnaires
set_error_handler('simpleErrorHandler');
set_exception_handler('simpleExceptionHandler');
register_shutdown_function('simpleShutdownHandler');

// Configuration des erreurs
ini_set('display_errors', IS_PRODUCTION ? 'off' : 'on');
ini_set('log_errors', 'on');
error_reporting(E_ALL);
?>
