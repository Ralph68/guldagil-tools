/**
 * public/assets/js/app.min.js
 * JavaScript consolid√© pour le portail Guldagil
 * Version 2.0.0 - Build #20250620001
 */

// =============================================================================
// CONFIGURATION GLOBALE
// =============================================================================

const APP_CONFIG = {
    name: 'Guldagil Portal',
    version: '2.0.0',
    build: '20250620001',
    debug: false, // Sera √©cras√© par la config PHP
    baseUrl: '',
    apiTimeout: 10000,
    notificationDuration: 3000
};

// Variables globales
let notificationTimeout = null;
let searchTimeout = null;

// =============================================================================
// UTILITAIRES DE BASE
// =============================================================================

/**
 * Utilitaires g√©n√©raux
 */
const Utils = {
    /**
     * Debounce une fonction
     */
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    },

    /**
     * Throttle une fonction
     */
    throttle(func, limit) {
        let inThrottle;
        return function() {
            const args = arguments;
            const context = this;
            if (!inThrottle) {
                func.apply(context, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        }
    },

    /**
     * Escape HTML
     */
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    },

    /**
     * Formatage des nombres
     */
    formatNumber(num) {
        return new Intl.NumberFormat('fr-FR').format(num);
    },

    /**
     * Formatage des dates
     */
    formatDate(date, options = {}) {
        const defaultOptions = {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        };
        return new Intl.DateTimeFormat('fr-FR', {...defaultOptions, ...options}).format(new Date(date));
    },

    /**
     * G√©n√®re un ID unique
     */
    generateId() {
        return Date.now().toString(36) + Math.random().toString(36).substr(2);
    },

    /**
     * Validation email
     */
    isValidEmail(email) {
        const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return re.test(email);
    },

    /**
     * Copie dans le presse-papier
     */
    async copyToClipboard(text) {
        try {
            await navigator.clipboard.writeText(text);
            return true;
        } catch (err) {
            console.error('Erreur copie:', err);
            return false;
        }
    },

    /**
     * Scroll smooth vers un √©l√©ment
     */
    scrollToElement(selector, offset = 0) {
        const element = document.querySelector(selector);
        if (element) {
            const top = element.offsetTop - offset;
            window.scrollTo({
                top: top,
                behavior: 'smooth'
            });
        }
    }
};

// =============================================================================
// SYST√àME DE NOTIFICATIONS
// =============================================================================

const Notifications = {
    /**
     * Container des notifications
     */
    container: null,

    /**
     * Initialise le syst√®me de notifications
     */
    init() {
        if (!this.container) {
            this.container = document.createElement('div');
            this.container.id = 'notifications-container';
            this.container.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 1080;
                pointer-events: none;
            `;
            document.body.appendChild(this.container);
        }
    },

    /**
     * Affiche une notification
     */
    show(message, type = 'info', duration = 3000) {
        this.init();

        const notification = document.createElement('div');
        notification.className = `portal-notification ${type}`;
        notification.style.cssText = `
            margin-bottom: 10px;
            pointer-events: auto;
            animation: slideInRight 0.3s ease-out;
        `;
        notification.innerHTML = `
            <div style="display: flex; align-items: center; gap: 8px;">
                <span>${this.getIcon(type)}</span>
                <span>${Utils.escapeHtml(message)}</span>
                <button onclick="this.parentElement.parentElement.remove()" 
                        style="background: none; border: none; cursor: pointer; margin-left: auto; opacity: 0.7;">√ó</button>
            </div>
        `;

        this.container.appendChild(notification);

        // Auto-remove
        if (duration > 0) {
            setTimeout(() => {
                if (notification.parentElement) {
                    notification.style.animation = 'slideOutRight 0.3s ease-in forwards';
                    setTimeout(() => notification.remove(), 300);
                }
            }, duration);
        }

        return notification;
    },

    /**
     * Ic√¥nes par type
     */
    getIcon(type) {
        const icons = {
            info: '‚ÑπÔ∏è',
            success: '‚úÖ',
            warning: '‚ö†Ô∏è',
            error: '‚ùå'
        };
        return icons[type] || icons.info;
    },

    /**
     * M√©thodes raccourcies
     */
    success(message, duration = 3000) {
        return this.show(message, 'success', duration);
    },

    error(message, duration = 5000) {
        return this.show(message, 'error', duration);
    },

    warning(message, duration = 4000) {
        return this.show(message, 'warning', duration);
    },

    info(message, duration = 3000) {
        return this.show(message, 'info', duration);
    }
};

// Alias global pour compatibilit√©
window.showNotification = Notifications.show.bind(Notifications);

// =============================================================================
// GESTION DES MODULES
// =============================================================================

const ModuleManager = {
    /**
     * Modules disponibles
     */
    modules: {},

    /**
     * Enregistre un module
     */
    register(name, module) {
        this.modules[name] = module;
        console.log(`üì¶ Module ${name} enregistr√©`);
    },

    /**
     * Charge un module
     */
    async load(name) {
        if (this.modules[name]) {
            try {
                if (typeof this.modules[name].init === 'function') {
                    await this.modules[name].init();
                    console.log(`‚úÖ Module ${name} initialis√©`);
                }
            } catch (error) {
                console.error(`‚ùå Erreur chargement module ${name}:`, error);
            }
        }
    },

    /**
     * D√©charge un module
     */
    unload(name) {
        if (this.modules[name] && typeof this.modules[name].destroy === 'function') {
            this.modules[name].destroy();
            console.log(`üóëÔ∏è Module ${name} d√©charg√©`);
        }
    }
};

// =============================================================================
// MODULE PORTAIL
// =============================================================================

const Portal = {
    config: {},
    
    /**
     * Initialise le portail
     */
    init(config = {}) {
        this.config = {...APP_CONFIG, ...config};
        
        console.log(`üöÄ Initialisation du portail ${this.config.name} v${this.config.version}`);
        
        // Initialiser les composants
        this.initEventListeners();
        this.initModuleCards();
        this.initSearch();
        this.initPerformanceMonitoring();
        
        // V√©rifier la connectivit√© des modules
        this.checkModulesHealth();
        
        console.log('‚úÖ Portail initialis√© avec succ√®s');
    },

    /**
     * Event listeners globaux
     */
    initEventListeners() {
        // Gestion du focus clavier
        document.addEventListener('keydown', (e) => {
            // Ctrl+K ou Cmd+K pour focus recherche
            if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                e.preventDefault();
                const searchInput = document.getElementById('quickSearchInput');
                if (searchInput) {
                    searchInput.focus();
                    searchInput.select();
                }
            }
            
            // Escape pour nettoyer la recherche
            if (e.key === 'Escape') {
                const searchInput = document.getElementById('quickSearchInput');
                if (searchInput && document.activeElement === searchInput) {
                    searchInput.value = '';
                    searchInput.blur();
                }
            }
        });

        // Gestion des erreurs globales
        window.addEventListener('error', (e) => {
            if (this.config.debug) {
                console.error('‚ùå Erreur globale:', e.error);
            }
        });

        // Gestion des promesses rejet√©es
        window.addEventListener('unhandledrejection', (e) => {
            if (this.config.debug) {
                console.error('‚ùå Promesse rejet√©e:', e.reason);
            }
        });
    },

    /**
     * Initialise les cartes de modules
     */
    initModuleCards() {
        const moduleCards = document.querySelectorAll('.module-card');
        
        moduleCards.forEach(card => {
            // Animation au hover am√©lior√©e
            card.addEventListener('mouseenter', function() {
                this.style.transform = 'translateY(-6px)';
            });
            
            card.addEventListener('mouseleave', function() {
                this.style.transform = 'translateY(0)';
            });

            // Tracking des clics
            const links = card.querySelectorAll('a[href]');
            links.forEach(link => {
                link.addEventListener('click', (e) => {
                    const moduleName = card.querySelector('.module-title')?.textContent || 'unknown';
                    console.log(`üìä Navigation vers module: ${moduleName}`);
                });
            });
        });
    },

    /**
     * Initialise la recherche rapide
     */
    initSearch() {
        const searchInput = document.getElementById('quickSearchInput');
        const searchForm = document.querySelector('.quick-search-form');
        
        if (!searchInput || !searchForm) return;

        // Auto-complete et suggestions
        searchInput.addEventListener('input', Utils.debounce((e) => {
            const query = e.target.value.trim();
            if (query.length >= 2) {
                this.handleSearchSuggestions(query);
            }
        }, 300));

        // Soumission du formulaire
        searchForm.addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleQuickSearch();
        });

        // Focus automatique avec indicateur visuel
        searchInput.addEventListener('focus', function() {
            this.parentElement.style.transform = 'scale(1.02)';
        });

        searchInput.addEventListener('blur', function() {
            this.parentElement.style.transform = 'scale(1)';
        });
    },

    /**
     * Gestion de la recherche rapide
     */
    handleQuickSearch() {
        const query = document.getElementById('quickSearchInput')?.value.trim();
        
        if (!query) {
            Notifications.warning('Veuillez saisir un terme de recherche');
            return;
        }

        console.log(`üîç Recherche: "${query}"`);

        // D√©tection du type de recherche
        if (query.toUpperCase().startsWith('EXP')) {
            // Recherche d'exp√©dition ADR
            this.searchInModule('adr', query);
        } else if (/^\d{2,5}$/.test(query)) {
            // Code postal ou d√©partement - redirection vers calculateur
            this.searchInModule('calculateur', query);
        } else {
            // Recherche g√©n√©rique
            this.performGlobalSearch(query);
        }
    },

    /**
     * Recherche dans un module sp√©cifique
     */
    searchInModule(module, query) {
        const urls = {
            adr: `adr/?search=${encodeURIComponent(query)}`,
            calculateur: `calculateur/?preset=${encodeURIComponent(query)}`
        };

        if (urls[module]) {
            Notifications.info(`Recherche dans le module ${module}...`);
            window.open(urls[module], '_blank');
        }
    },

    /**
     * Recherche globale
     */
    performGlobalSearch(query) {
        Notifications.info(`Recherche globale de "${query}" en cours...`);
        
        // TODO: Impl√©menter la recherche multi-modules
        setTimeout(() => {
            Notifications.warning('Recherche globale non encore impl√©ment√©e');
        }, 1000);
    },

    /**
     * Suggestions de recherche
     */
    handleSearchSuggestions(query) {
        // TODO: Impl√©menter les suggestions dynamiques
        if (this.config.debug) {
            console.log(`üí° Suggestions pour: "${query}"`);
        }
    },

    /**
     * Monitoring des performances
     */
    initPerformanceMonitoring() {
        if (!this.config.debug) return;

        // Mesurer le temps de chargement
        window.addEventListener('load', () => {
            const loadTime = performance.now();
            console.log(`‚ö° Temps de chargement: ${Math.round(loadTime)}ms`);
        });

        // Observer les m√©triques Web Vitals
        if ('web-vitals' in window) {
            // TODO: Impl√©menter les Web Vitals si la biblioth√®que est disponible
        }
    },

    /**
     * V√©rification de la sant√© des modules
     */
    async checkModulesHealth() {
        const modules = ['calculateur', 'adr'];
        const healthChecks = [];

        modules.forEach(module => {
            const check = fetch(`${module}/api/health.php`, {
                method: 'GET',
                timeout: 5000
            })
            .then(response => ({
                module,
                status: response.ok ? 'healthy' : 'degraded',
                responseTime: response.headers.get('X-Response-Time') || 'unknown'
            }))
            .catch(error => ({
                module,
                status: 'unavailable',
                error: error.message
            }));

            healthChecks.push(check);
        });

        try {
            const results = await Promise.allSettled(healthChecks);
            results.forEach((result, index) => {
                if (result.status === 'fulfilled') {
                    const data = result.value;
                    const icon = data.status === 'healthy' ? '‚úÖ' : 
                                data.status === 'degraded' ? '‚ö†Ô∏è' : '‚ùå';
                    console.log(`${icon} Module ${data.module}: ${data.status}`);
                }
            });
        } catch (error) {
            console.warn('‚ö†Ô∏è Erreur v√©rification sant√© modules:', error);
        }
    }
};

// =============================================================================
// FONCTIONS GLOBALES (COMPATIBILIT√â)
// =============================================================================

/**
 * Fonction globale pour la recherche rapide (appel√©e depuis le HTML)
 */
window.handleQuickSearch = function(event) {
    if (event) event.preventDefault();
    Portal.handleQuickSearch();
};

/**
 * Fonction pour d√©finir une recherche pr√©d√©finie
 */
window.setQuickSearch = function(value) {
    const searchInput = document.getElementById('quickSearchInput');
    if (searchInput) {
        searchInput.value = value;
        searchInput.focus();
        
        // Animation de mise en √©vidence
        searchInput.style.background = '#e0f2fe';
        setTimeout(() => {
            searchInput.style.background = '';
        }, 500);
    }
};

/**
 * Fonction pour afficher les r√©sultats de recherche
 */
window.showSearchResults = function(query) {
    Portal.performGlobalSearch(query);
};

// =============================================================================
// MODULE CALCULATEUR
// =============================================================================

const CalculatorModule = {
    name: 'calculateur',
    
    init() {
        console.log('üìä Module Calculateur initialis√©');
        this.initCalculatorFeatures();
    },
    
    initCalculatorFeatures() {
        // Fonctionnalit√©s sp√©cifiques au calculateur
        if (window.location.pathname.includes('calculateur')) {
            this.setupCalculatorInteractions();
        }
    },
    
    setupCalculatorInteractions() {
        // TODO: Impl√©menter les interactions sp√©cifiques au calculateur
        console.log('üßÆ Interactions calculateur configur√©es');
    },
    
    destroy() {
        console.log('üóëÔ∏è Module Calculateur d√©charg√©');
    }
};

// =============================================================================
// MODULE ADR
// =============================================================================

const ADRModule = {
    name: 'adr',
    
    init() {
        console.log('‚ö†Ô∏è Module ADR initialis√©');
        this.initADRFeatures();
    },
    
    initADRFeatures() {
        // Fonctionnalit√©s sp√©cifiques √† l'ADR
        if (window.location.pathname.includes('adr')) {
            this.setupADRInteractions();
        }
    },
    
    setupADRInteractions() {
        // TODO: Impl√©menter les interactions sp√©cifiques √† l'ADR
        console.log('‚ö†Ô∏è Interactions ADR configur√©es');
    },
    
    destroy() {
        console.log('üóëÔ∏è Module ADR d√©charg√©');
    }
};

// =============================================================================
// MODULE ADMIN
// =============================================================================

const AdminModule = {
    name: 'admin',
    
    init() {
        console.log('‚öôÔ∏è Module Admin initialis√©');
        this.initAdminFeatures();
    },
    
    initAdminFeatures() {
        // Fonctionnalit√©s sp√©cifiques √† l'admin
        if (window.location.pathname.includes('admin')) {
            this.setupAdminInteractions();
            this.initDataTables();
            this.initModalManagement();
        }
    },
    
    setupAdminInteractions() {
        // Gestion des formulaires admin
        const forms = document.querySelectorAll('.admin-form');
        forms.forEach(form => {
            form.addEventListener('submit', this.handleAdminFormSubmit.bind(this));
        });
        
        // Gestion des actions bulk
        this.initBulkActions();
    },
    
    handleAdminFormSubmit(event) {
        const form = event.target;
        const submitBtn = form.querySelector('button[type="submit"]');
        
        if (submitBtn) {
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<span>‚è≥</span> Traitement...';
            
            // Restaurer apr√®s 5 secondes en cas d'erreur
            setTimeout(() => {
                submitBtn.disabled = false;
                submitBtn.innerHTML = submitBtn.dataset.originalText || 'Enregistrer';
            }, 5000);
        }
    },
    
    initDataTables() {
        // Am√©lioration des tableaux de donn√©es
        const tables = document.querySelectorAll('.data-table');
        tables.forEach(table => {
            this.enhanceTable(table);
        });
    },
    
    enhanceTable(table) {
        // Tri des colonnes
        const headers = table.querySelectorAll('th[data-sortable]');
        headers.forEach(header => {
            header.style.cursor = 'pointer';
            header.addEventListener('click', () => {
                this.sortTable(table, header);
            });
        });
        
        // Recherche dans le tableau
        this.addTableSearch(table);
    },
    
    sortTable(table, header) {
        const columnIndex = Array.from(header.parentElement.children).indexOf(header);
        const tbody = table.querySelector('tbody');
        const rows = Array.from(tbody.querySelectorAll('tr'));
        
        const isAscending = !header.classList.contains('sort-asc');
        
        // Nettoyer les classes de tri
        header.parentElement.querySelectorAll('th').forEach(th => {
            th.classList.remove('sort-asc', 'sort-desc');
        });
        
        // Ajouter la nouvelle classe
        header.classList.add(isAscending ? 'sort-asc' : 'sort-desc');
        
        // Trier les lignes
        rows.sort((a, b) => {
            const aText = a.children[columnIndex].textContent.trim();
            const bText = b.children[columnIndex].textContent.trim();
            
            // D√©tecter le type de donn√©es
            const aNum = parseFloat(aText.replace(/[^\d.-]/g, ''));
            const bNum = parseFloat(bText.replace(/[^\d.-]/g, ''));
            
            if (!isNaN(aNum) && !isNaN(bNum)) {
                return isAscending ? aNum - bNum : bNum - aNum;
            } else {
                return isAscending ? 
                    aText.localeCompare(bText) : 
                    bText.localeCompare(aText);
            }
        });
        
        // R√©appliquer les lignes tri√©es
        rows.forEach(row => tbody.appendChild(row));
        
        Notifications.success(`Tableau tri√© par ${header.textContent}`);
    },
    
    addTableSearch(table) {
        const searchContainer = document.createElement('div');
        searchContainer.className = 'table-search-container';
        searchContainer.innerHTML = `
            <input type="text" 
                   placeholder="Rechercher dans le tableau..." 
                   class="table-search-input"
                   style="width: 300px; padding: 8px; margin: 10px 0; border: 1px solid #ddd; border-radius: 4px;">
        `;
        
        table.parentElement.insertBefore(searchContainer, table);
        
        const searchInput = searchContainer.querySelector('.table-search-input');
        searchInput.addEventListener('input', Utils.debounce((e) => {
            this.filterTable(table, e.target.value);
        }, 300));
    },
    
    filterTable(table, query) {
        const tbody = table.querySelector('tbody');
        const rows = tbody.querySelectorAll('tr');
        
        rows.forEach(row => {
            const text = row.textContent.toLowerCase();
            const matches = text.includes(query.toLowerCase());
            row.style.display = matches ? '' : 'none';
        });
    },
    
    initBulkActions() {
        const bulkCheckboxes = document.querySelectorAll('input[name="bulk_select[]"]');
        const bulkActionSelect = document.getElementById('bulk-action');
        const bulkActionBtn = document.getElementById('bulk-action-btn');
        
        if (bulkCheckboxes.length && bulkActionSelect && bulkActionBtn) {
            // S√©lection multiple
            bulkCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', () => {
                    const checkedBoxes = document.querySelectorAll('input[name="bulk_select[]"]:checked');
                    bulkActionBtn.disabled = checkedBoxes.length === 0;
                    
                    if (checkedBoxes.length > 0) {
                        bulkActionBtn.textContent = `Appliquer (${checkedBoxes.length} s√©lectionn√©${checkedBoxes.length > 1 ? 's' : ''})`;
                    }
                });
            });
            
            // Action bulk
            bulkActionBtn.addEventListener('click', () => {
                this.handleBulkAction();
            });
        }
    },
    
    handleBulkAction() {
        const selectedIds = Array.from(document.querySelectorAll('input[name="bulk_select[]"]:checked'))
            .map(cb => cb.value);
        const action = document.getElementById('bulk-action').value;
        
        if (selectedIds.length === 0) {
            Notifications.warning('Aucun √©l√©ment s√©lectionn√©');
            return;
        }
        
        if (!action) {
            Notifications.warning('Veuillez choisir une action');
            return;
        }
        
        const confirmMessage = `Appliquer l'action "${action}" √† ${selectedIds.length} √©l√©ment${selectedIds.length > 1 ? 's' : ''} ?`;
        
        if (confirm(confirmMessage)) {
            Notifications.info(`Application de l'action "${action}" en cours...`);
            
            // TODO: Envoyer la requ√™te au serveur
            console.log('Bulk action:', action, 'IDs:', selectedIds);
        }
    },
    
    initModalManagement() {
        // Gestion des modales admin
        const modalTriggers = document.querySelectorAll('[data-modal-target]');
        
        modalTriggers.forEach(trigger => {
            trigger.addEventListener('click', (e) => {
                e.preventDefault();
                const modalId = trigger.dataset.modalTarget;
                this.openModal(modalId);
            });
        });
        
        // Fermeture des modales
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('modal-backdrop')) {
                this.closeModal(e.target.parentElement);
            }
        });
        
        // Fermeture par Escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                const openModal = document.querySelector('.modal.show');
                if (openModal) {
                    this.closeModal(openModal);
                }
            }
        });
    },
    
    openModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.add('show');
            document.body.style.overflow = 'hidden';
            
            // Focus sur le premier input
            const firstInput = modal.querySelector('input, select, textarea');
            if (firstInput) {
                setTimeout(() => firstInput.focus(), 100);
            }
        }
    },
    
    closeModal(modal) {
        if (modal) {
            modal.classList.remove('show');
            document.body.style.overflow = '';
        }
    },
    
    destroy() {
        console.log('üóëÔ∏è Module Admin d√©charg√©');
    }
};

// =============================================================================
// GESTION DES ERREURS ET FEEDBACK
// =============================================================================

const ErrorHandler = {
    /**
     * Gestion centralis√©e des erreurs AJAX
     */
    handleAjaxError(xhr, textStatus, errorThrown) {
        let message = 'Une erreur est survenue';
        
        if (xhr.status === 0) {
            message = 'Pas de connexion r√©seau';
        } else if (xhr.status === 404) {
            message = 'Ressource non trouv√©e';
        } else if (xhr.status === 500) {
            message = 'Erreur serveur interne';
        } else if (xhr.status === 403) {
            message = 'Acc√®s non autoris√©';
        } else if (textStatus === 'timeout') {
            message = 'D√©lai d\'attente d√©pass√©';
        }
        
        Notifications.error(message);
        
        if (APP_CONFIG.debug) {
            console.error('Erreur AJAX:', {
                status: xhr.status,
                statusText: xhr.statusText,
                responseText: xhr.responseText,
                textStatus,
                errorThrown
            });
        }
    },
    
    /**
     * Validation c√¥t√© client
     */
    validateForm(form) {
        const errors = [];
        const requiredFields = form.querySelectorAll('[required]');
        
        requiredFields.forEach(field => {
            if (!field.value.trim()) {
                errors.push(`Le champ "${field.labels[0]?.textContent || field.name}" est requis`);
                field.classList.add('error');
            } else {
                field.classList.remove('error');
            }
        });
        
        // Validation email
        const emailFields = form.querySelectorAll('input[type="email"]');
        emailFields.forEach(field => {
            if (field.value && !Utils.isValidEmail(field.value)) {
                errors.push(`L'email "${field.value}" n'est pas valide`);
                field.classList.add('error');
            }
        });
        
        if (errors.length > 0) {
            Notifications.error(errors[0]);
            return false;
        }
        
        return true;
    }
};

// =============================================================================
// INITIALISATION GLOBALE
// =============================================================================

// Enregistrement des modules
ModuleManager.register('portal', Portal);
ModuleManager.register('calculateur', CalculatorModule);
ModuleManager.register('adr', ADRModule);
ModuleManager.register('admin', AdminModule);

// Initialisation au chargement du DOM
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Chargement de app.min.js');
    
    // Initialiser les notifications
    Notifications.init();
    
    // D√©terminer quel module charger selon l'URL
    const path = window.location.pathname;
    
    if (path.includes('/admin/')) {
        ModuleManager.load('admin');
    } else if (path.includes('/calculateur/')) {
        ModuleManager.load('calculateur');
    } else if (path.includes('/adr/')) {
        ModuleManager.load('adr');
    } else {
        // Page d'accueil du portail
        if (window.PORTAL_CONFIG) {
            Portal.init(window.PORTAL_CONFIG);
        } else {
            Portal.init();
        }
    }
    
    console.log('‚úÖ Application initialis√©e');
});

// Gestion du d√©chargement
window.addEventListener('beforeunload', function() {
    // Nettoyage des ressources
    Object.keys(ModuleManager.modules).forEach(moduleName => {
        ModuleManager.unload(moduleName);
    });
});

// =============================================================================
// EXPOSITION DES APIS PUBLIQUES
// =============================================================================

// APIs globales pour compatibilit√© et usage externe
window.Portal = Portal;
window.ModuleManager = ModuleManager;
window.Notifications = Notifications;
window.Utils = Utils;
window.ErrorHandler = ErrorHandler;

// M√©thodes sp√©cifiques expos√©es globalement
window.copyToClipboard = Utils.copyToClipboard;
window.formatNumber = Utils.formatNumber;
window.formatDate = Utils.formatDate;

// Debug helpers
if (APP_CONFIG.debug) {
    window.debug = {
        portal: Portal,
        modules: ModuleManager.modules,
        config: APP_CONFIG,
        version: () => console.log(`üè∑Ô∏è Guldagil Portal v${APP_CONFIG.version} (Build #${APP_CONFIG.build})`)
    };
    
    console.log('üêõ Mode debug activ√©. Utilisez window.debug pour l\'inspection.');
}
